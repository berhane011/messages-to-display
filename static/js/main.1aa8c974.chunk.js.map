{"version":3,"sources":["Message.js","Pagination.js","img.jpg","Jambotrun.js","App.js","reportWebVitals.js","index.js"],"names":["Message","uuid","sendAt","content","senderuuid","deleted","className","onClick","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","map","number","href","Jambotrun","style","opacity","App","filteredArr","messages","sort","a","b","Date","sentAt","reduce","acc","current","find","item","concat","useState","currentPage","setCurrentPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","setstate","index","moment","format","senderUuid","splice","deletehandler","length","pageNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kiEAmBeA,MAhBf,YAAkE,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,QACpD,OACE,sBAAKC,UAAU,iCAAf,UACE,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UAAU,YAAd,SAA2BF,IAC3B,qBAAIE,UAAU,YAAd,cAA4BJ,KAC5B,oBAAII,UAAU,YAAd,SAA2BL,IAC3B,oBAAIK,UAAU,YAAd,SAA2BH,OAE7B,wBAAQI,QAASF,EAASC,UAAU,eAApC,wB,gBCSSE,GCrBA,I,MDEI,SAAC,GAElB,IAF8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GACXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACzDD,EAAYI,KAAKH,GAEnB,OACE,qBAAKP,UAAU,mBAAf,SACE,oBAAIA,UAAU,4BAAd,SACGM,EAAYK,KAAI,SAACC,GAAD,OACf,oBAAiBZ,UAAU,YAA3B,SACE,mBAAGC,QAAS,kBAAMI,EAASO,IAASC,KAAK,KAAKb,UAAU,YAAxD,SACGY,KAFIA,YEOJE,MAhBf,WAIE,OACE,qBACEC,MALU,CACZC,QAAS,OAKPhB,UAAU,yFAFZ,SAIE,qBAAKA,UAAU,YAAf,SACE,oBAAIA,UAAU,YAAd,mCCqDOiB,MAxDf,WAEE,IAIMC,EAJSC,IAASC,MAAK,SAAUC,EAAGC,GACxC,OAAO,IAAIC,KAAKF,EAAEG,QAAU,IAAID,KAAKD,EAAEE,WAGdC,QAAO,SAACC,EAAKC,GAItC,OAHUD,EAAIE,MACZ,SAACC,GAAD,OAAUA,EAAKlC,OAASgC,EAAQhC,MAAQkC,EAAKL,SAAWG,EAAQH,UAKzDE,EAFAA,EAAII,OAAO,CAACH,MAIpB,IAfU,EAiByBI,mBAAS,GAjBlC,mBAiBNC,EAjBM,KAiBOC,EAjBP,OAkB2BF,mBAAS,GAlBpC,mBAkBN5B,EAlBM,KAoBP+B,GApBO,KAoBWF,EAAc7B,GAChCgC,EAAmBD,EAAkB/B,EACrCiC,EAAelB,EAAYmB,MAAMF,EAAkBD,GAtB5C,EAwBaH,mBAASZ,KAxBtB,mBAwBCmB,GAxBD,WAgCb,OACE,sBAAKtC,UAAU,WAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,gBAAf,SACGoC,EAAazB,KAAI,SAACkB,EAAMU,GAAP,OAChB,cAAC,EAAD,CAEE5C,KAAMkC,EAAKlC,KACXE,QAASgC,EAAKhC,QACdD,OAAQ4C,IAAOX,EAAKL,QAAQiB,OAAO,mBACnC3C,WAAY+B,EAAKa,WACjB3C,QAAS,kBAlBG,SAACwC,GACrBpB,IAASwB,OAAOJ,EAAO,GACvBD,EAAS,CAAEnB,eAgBYyB,CAAcL,KALxBA,QASX,cAAC,EAAD,CACEpC,aAAcA,EACdC,WAAYc,EAAY2B,OACxBxC,SApBW,SAACyC,GAAD,OAAgBb,EAAea,UC3BnCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1aa8c974.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\nfunction Message({ uuid, sendAt, content, senderuuid, deleted }) {\r\n  return (\r\n    <div className=\"list container bg-info rounded\">\r\n      <ul className=\"list-group\">\r\n        <li className=\"page-item\">{senderuuid}</li>\r\n        <li className=\"page-item\"> {sendAt}</li>\r\n        <li className=\"page-item\">{uuid}</li>\r\n        <li className=\"page-item\">{content}</li>\r\n      </ul>\r\n      <button onClick={deleted} className=\"delete__item\">\r\n        delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n  return (\r\n    <nav className=\"Page navigation \">\r\n      <ul className=\"pagination pagination-lg \">\r\n        {pageNumbers.map((number) => (\r\n          <li key={number} className=\"page-item\">\r\n            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\nexport default Pagination;\r\n","export default __webpack_public_path__ + \"static/media/img.fd021904.jpg\";","import React from \"react\";\r\n\r\nfunction Jambotrun() {\r\n  const style = {\r\n    opacity: \".80\",\r\n  };\r\n  return (\r\n    <div\r\n      style={style}\r\n      className=\"jumbotron jumbotron-fluid bg-primary t text-center rounded font-weight-bold container \"\r\n    >\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">display massages</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jambotrun;\r\n","import \"./App.css\";\nimport { messages } from \"./data.json\";\nimport Message from \"./Message\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport img from \"./img.jpg\";\n\nimport Pagination from \"./Pagination\";\nimport Jambotrun from \"./Jambotrun\";\nfunction App() {\n  // sort the array in to  ascending order\n  const sorted = messages.sort(function (a, b) {\n    return new Date(a.sentAt) - new Date(b.sentAt);\n  });\n  // deduplicated if the uuid and content are the same.\n  const filteredArr = sorted.reduce((acc, current) => {\n    const x = acc.find(\n      (item) => item.uuid === current.uuid || item.sentAt === current.sentAt\n    );\n    if (!x) {\n      return acc.concat([current]);\n    } else {\n      return acc;\n    }\n  }, []);\n  // get current messages\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setpostsPerPage] = useState(5);\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = filteredArr.slice(indexOfFirstPost, indexOfLastPost);\n\n  const [state, setstate] = useState(messages);\n  const deletehandler = (index) => {\n    messages.splice(index, 1);\n    setstate({ messages });\n  };\n  //change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"back-img\">\n      <Jambotrun />\n      <div className=\"App container\">\n        {currentPosts.map((item, index) => (\n          <Message\n            key={index}\n            uuid={item.uuid}\n            content={item.content}\n            sendAt={moment(item.sentAt).format(\"dddd/MM/DD/YYYY\")}\n            senderuuid={item.senderUuid}\n            deleted={() => deletehandler(index)}\n          />\n        ))}\n      </div>\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={filteredArr.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}